(set-logic QF_NRA)
(set-info :source |
From termination analysis of term rewriting.

Submitted by Harald Roman Zankl <Harald.Zankl@uibk.ac.at>

|)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun x6 () Real)
(declare-fun x13 () Real)
(declare-fun x3 () Real)
(declare-fun x10 () Real)
(declare-fun x0 () Real)
(declare-fun x17 () Real)
(declare-fun x7 () Real)
(declare-fun x14 () Real)
(declare-fun x4 () Real)
(declare-fun x11 () Real)
(declare-fun x1 () Real)
(declare-fun x18 () Real)
(declare-fun x8 () Real)
(declare-fun x15 () Real)
(declare-fun x5 () Real)
(declare-fun x12 () Real)
(declare-fun x2 () Real)
(declare-fun x9 () Real)
(declare-fun x16 () Real)
(assert (>= x6 0))
(assert (>= x13 0))
(assert (>= x3 0))
(assert (>= x10 0))
(assert (>= x0 0))
(assert (>= x17 0))
(assert (>= x7 0))
(assert (>= x14 0))
(assert (>= x4 0))
(assert (>= x11 0))
(assert (>= x1 0))
(assert (>= x18 0))
(assert (>= x8 0))
(assert (>= x15 0))
(assert (>= x5 0))
(assert (>= x12 0))
(assert (>= x2 0))
(assert (>= x9 0))
(assert (>= x16 0))
(assert (let ((?v_0 (+ x0 (* x3 x4))) (?v_1 (+ x7 (* x8 x9))) (?v_3 (+ x12 (* x13 x9)))) (let ((?v_2 (+ x7 (* x8 ?v_3))) (?v_5 (+ (* x13 x10) x14)) (?v_14 (+ x12 (* x13 ?v_3)))) (let ((?v_4 (+ x5 (* x6 ?v_14))) (?v_17 (* x13 ?v_5)) (?v_7 (+ x5 (* x6 x4))) (?v_18 (+ x12 (* x14 x4)))) (let ((?v_6 (+ x7 (* x11 ?v_18))) (?v_9 (+ x9 (* x10 x4)))) (let ((?v_8 (+ x0 (* x1 ?v_9))) (?v_11 (* x11 x13)) (?v_12 (+ x15 (* x16 ?v_9)))) (let ((?v_10 (+ x7 (* x8 ?v_12))) (?v_19 (+ x12 (* x13 ?v_12)))) (let ((?v_13 (+ x5 (* x6 ?v_19))) (?v_22 (* x13 x17)) (?v_23 (+ (* x13 x18) x14))) (let ((?v_26 (and (and (and (and (and (and (and (and (and (> ?v_0 x5) (>= ?v_0 x5)) (>= x1 x6)) (and (and (> ?v_0 ?v_1) (>= ?v_0 ?v_1)) (>= x1 (+ (* x8 x10) x11)))) (and (and (and (> ?v_0 ?v_2) (>= ?v_0 ?v_2)) (>= x2 x11)) (>= x1 (* x8 ?v_5)))) (and (and (and (> ?v_0 ?v_4) (>= ?v_0 ?v_4)) (>= x2 (* x6 x14))) (>= x1 (* x6 ?v_17)))) (and (> ?v_6 ?v_7) (>= ?v_6 ?v_7))) (and (and (and (> ?v_6 ?v_8) (>= ?v_6 ?v_8)) (>= x8 x2)) (>= ?v_11 x3))) (and (and (and (> ?v_6 ?v_10) (>= ?v_6 ?v_10)) (>= x8 (* x8 x17))) (>= ?v_11 (+ (* x8 x18) x11)))) (and (and (and (> ?v_6 ?v_13) (>= ?v_6 ?v_13)) (>= x8 (* x6 ?v_22))) (>= ?v_11 (* x6 ?v_23))))) (?v_16 (+ x9 (* x10 ?v_14))) (?v_24 (* x18 x4))) (let ((?v_15 (+ x15 ?v_24)) (?v_21 (+ x9 (* x10 ?v_19))) (?v_20 (+ x12 (* x14 ?v_18))) (?v_25 (+ x9 (* x10 (+ (+ x15 (* x16 (+ (+ x15 (* x17 x4)) ?v_24))) ?v_24))))) (and (and (and (and ?v_26 (and (and (and (> ?v_15 ?v_16) (>= ?v_15 ?v_16)) (>= x17 (* x10 x14))) (>= x16 (* x10 ?v_17)))) (and (and (and (> ?v_20 ?v_21) (>= ?v_20 ?v_21)) (>= x13 (* x10 ?v_22))) (>= (* x14 x13) (* x10 ?v_23)))) (and (and (> ?v_25 0) (>= ?v_25 0)) (>= (* x10 (* x16 x16)) 1))) ?v_26)))))))))))
(check-sat)
(exit)
