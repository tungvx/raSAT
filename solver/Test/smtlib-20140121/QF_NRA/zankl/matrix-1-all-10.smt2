(set-logic QF_NRA)
(set-info :source |
From termination analysis of term rewriting.

Submitted by Harald Roman Zankl <Harald.Zankl@uibk.ac.at>

|)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun x6 () Real)
(declare-fun x23 () Real)
(declare-fun x13 () Real)
(declare-fun x30 () Real)
(declare-fun x3 () Real)
(declare-fun x20 () Real)
(declare-fun x10 () Real)
(declare-fun x27 () Real)
(declare-fun x0 () Real)
(declare-fun x17 () Real)
(declare-fun x7 () Real)
(declare-fun x24 () Real)
(declare-fun x14 () Real)
(declare-fun x31 () Real)
(declare-fun x4 () Real)
(declare-fun x21 () Real)
(declare-fun x11 () Real)
(declare-fun x28 () Real)
(declare-fun x1 () Real)
(declare-fun x18 () Real)
(declare-fun x8 () Real)
(declare-fun x25 () Real)
(declare-fun x15 () Real)
(declare-fun x5 () Real)
(declare-fun x22 () Real)
(declare-fun x12 () Real)
(declare-fun x29 () Real)
(declare-fun x2 () Real)
(declare-fun x19 () Real)
(declare-fun x9 () Real)
(declare-fun x26 () Real)
(declare-fun x16 () Real)
(assert (>= x6 0))
(assert (>= x23 0))
(assert (>= x13 0))
(assert (>= x30 0))
(assert (>= x3 0))
(assert (>= x20 0))
(assert (>= x10 0))
(assert (>= x27 0))
(assert (>= x0 0))
(assert (>= x17 0))
(assert (>= x7 0))
(assert (>= x24 0))
(assert (>= x14 0))
(assert (>= x31 0))
(assert (>= x4 0))
(assert (>= x21 0))
(assert (>= x11 0))
(assert (>= x28 0))
(assert (>= x1 0))
(assert (>= x18 0))
(assert (>= x8 0))
(assert (>= x25 0))
(assert (>= x15 0))
(assert (>= x5 0))
(assert (>= x22 0))
(assert (>= x12 0))
(assert (>= x29 0))
(assert (>= x2 0))
(assert (>= x19 0))
(assert (>= x9 0))
(assert (>= x26 0))
(assert (>= x16 0))
(assert (let ((?v_0 (+ x0 (* x1 x2))) (?v_1 (+ x6 (* x8 x9))) (?v_21 (* x19 x9))) (let ((?v_3 (+ x17 ?v_21))) (let ((?v_2 (+ (+ x12 (* x13 x14)) (* x16 ?v_3))) (?v_8 (+ (+ x20 (* x21 x14)) (* x22 ?v_3)))) (let ((?v_4 (+ (+ x0 (* x1 ?v_8)) (* x3 x23))) (?v_11 (+ (* x21 x15) (* x22 x18))) (?v_17 (+ x25 (* x26 x25)))) (let ((?v_5 (+ x10 (* x11 ?v_17))) (?v_19 (* x26 x26)) (?v_7 (+ x6 (* x8 x27))) (?v_24 (+ x25 (* x26 x27)))) (let ((?v_6 (+ (+ x6 (* x7 x25)) (* x8 ?v_24)))) (let ((?v_29 (and (and (and (and (and (and (and (and (> ?v_0 x4) (>= ?v_0 x4)) (>= x3 x5)) (and (and (> ?v_0 ?v_1) (>= ?v_0 ?v_1)) (>= x3 x7))) (and (and (> ?v_0 x10) (>= ?v_0 x10)) (>= x3 x11))) (and (and (> ?v_0 ?v_2) (>= ?v_0 ?v_2)) (>= x3 (+ (* x13 x15) (* x16 x18))))) (and (and (> ?v_0 ?v_4) (>= ?v_0 ?v_4)) (>= x3 (+ (* x1 ?v_11) (* x3 x24))))) (and (and (> ?v_5 x10) (>= ?v_5 x10)) (>= (* x11 ?v_19) x11))) (and (and (> ?v_6 ?v_7) (>= ?v_6 ?v_7)) (>= (* x7 x26) x7)))) (?v_10 (+ (+ x28 (* x29 ?v_8)) (* x30 x23))) (?v_9 (+ x28 (* x29 x2))) (?v_12 (+ x20 (* x22 x31))) (?v_13 (+ x20 (* x21 x31))) (?v_14 (+ (+ x20 (* x21 x2)) (* x22 x2))) (?v_15 (+ x14 (* x15 x9))) (?v_16 (+ x14 (* x15 (+ x25 (* x26 x9))))) (?v_18 (+ x14 (* x15 ?v_17))) (?v_20 (+ x17 (* x18 x9))) (?v_23 (+ x17 (* x18 x25)))) (let ((?v_22 (+ ?v_23 ?v_21)) (?v_26 (+ x17 (* x19 x27))) (?v_25 (+ ?v_23 (* x19 ?v_24))) (?v_27 (+ x23 (* x24 x9))) (?v_28 (+ x23 (* x24 x25)))) (and (and (and (and (and (and (and (and (and (and (and (and (and ?v_29 (and (and (> ?v_9 ?v_10) (>= ?v_9 ?v_10)) (>= x30 (+ (* x29 ?v_11) (* x30 x24))))) (and (> ?v_12 x31) (>= ?v_12 x31))) (and (> ?v_13 x31) (>= ?v_13 x31))) (and (> ?v_14 x2) (>= ?v_14 x2))) (and (> ?v_15 x2) (>= ?v_15 x2))) (and (> ?v_16 x31) (>= ?v_16 x31))) (and (and (> ?v_18 x14) (>= ?v_18 x14)) (>= (* x15 ?v_19) x15))) (and (> ?v_20 x31) (>= ?v_20 x31))) (and (> ?v_22 x2) (>= ?v_22 x2))) (and (and (> ?v_25 ?v_26) (>= ?v_25 ?v_26)) (>= (* x18 x26) x18))) (and (> ?v_27 x9) (>= ?v_27 x9))) (and (and (> ?v_28 0) (>= ?v_28 0)) (>= (* x24 x26) 1))) ?v_29))))))))))
(check-sat)
(exit)
