(set-logic QF_NRA)
(set-info :source |
From termination analysis of term rewriting.

Submitted by Harald Roman Zankl <Harald.Zankl@uibk.ac.at>

|)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun x6 () Real)
(declare-fun x23 () Real)
(declare-fun x40 () Real)
(declare-fun x13 () Real)
(declare-fun x30 () Real)
(declare-fun x47 () Real)
(declare-fun x3 () Real)
(declare-fun x20 () Real)
(declare-fun x37 () Real)
(declare-fun x54 () Real)
(declare-fun x10 () Real)
(declare-fun x27 () Real)
(declare-fun x44 () Real)
(declare-fun x0 () Real)
(declare-fun x17 () Real)
(declare-fun x34 () Real)
(declare-fun x51 () Real)
(declare-fun x7 () Real)
(declare-fun x24 () Real)
(declare-fun x41 () Real)
(declare-fun x14 () Real)
(declare-fun x31 () Real)
(declare-fun x48 () Real)
(declare-fun x4 () Real)
(declare-fun x21 () Real)
(declare-fun x38 () Real)
(declare-fun x11 () Real)
(declare-fun x28 () Real)
(declare-fun x45 () Real)
(declare-fun x1 () Real)
(declare-fun x18 () Real)
(declare-fun x35 () Real)
(declare-fun x52 () Real)
(declare-fun x8 () Real)
(declare-fun x25 () Real)
(declare-fun x42 () Real)
(declare-fun x15 () Real)
(declare-fun x32 () Real)
(declare-fun x49 () Real)
(declare-fun x5 () Real)
(declare-fun x22 () Real)
(declare-fun x39 () Real)
(declare-fun x12 () Real)
(declare-fun x29 () Real)
(declare-fun x46 () Real)
(declare-fun x2 () Real)
(declare-fun x19 () Real)
(declare-fun x36 () Real)
(declare-fun x53 () Real)
(declare-fun x9 () Real)
(declare-fun x26 () Real)
(declare-fun x43 () Real)
(declare-fun x16 () Real)
(declare-fun x33 () Real)
(declare-fun x50 () Real)
(assert (>= x6 0))
(assert (>= x23 0))
(assert (>= x40 0))
(assert (>= x13 0))
(assert (>= x30 0))
(assert (>= x47 0))
(assert (>= x3 0))
(assert (>= x20 0))
(assert (>= x37 0))
(assert (>= x54 0))
(assert (>= x10 0))
(assert (>= x27 0))
(assert (>= x44 0))
(assert (>= x0 0))
(assert (>= x17 0))
(assert (>= x34 0))
(assert (>= x51 0))
(assert (>= x7 0))
(assert (>= x24 0))
(assert (>= x41 0))
(assert (>= x14 0))
(assert (>= x31 0))
(assert (>= x48 0))
(assert (>= x4 0))
(assert (>= x21 0))
(assert (>= x38 0))
(assert (>= x11 0))
(assert (>= x28 0))
(assert (>= x45 0))
(assert (>= x1 0))
(assert (>= x18 0))
(assert (>= x35 0))
(assert (>= x52 0))
(assert (>= x8 0))
(assert (>= x25 0))
(assert (>= x42 0))
(assert (>= x15 0))
(assert (>= x32 0))
(assert (>= x49 0))
(assert (>= x5 0))
(assert (>= x22 0))
(assert (>= x39 0))
(assert (>= x12 0))
(assert (>= x29 0))
(assert (>= x46 0))
(assert (>= x2 0))
(assert (>= x19 0))
(assert (>= x36 0))
(assert (>= x53 0))
(assert (>= x9 0))
(assert (>= x26 0))
(assert (>= x43 0))
(assert (>= x16 0))
(assert (>= x33 0))
(assert (>= x50 0))
(assert (let ((?v_0 (+ x0 (* x1 x2))) (?v_1 (+ x6 (* x7 x2))) (?v_2 (+ x6 (* x7 x10))) (?v_3 (+ x11 (* x12 x13))) (?v_5 (>= x14 x5)) (?v_4 (+ x11 (* x12 x15)))) (let ((?v_6 (and (> ?v_4 x4) (>= ?v_4 x4))) (?v_8 (* x12 x16)) (?v_20 (+ (+ x19 (* x20 x21)) (* x23 x21)))) (let ((?v_7 (+ x17 (* x18 ?v_20))) (?v_23 (* x20 x22)) (?v_24 (* x23 x22)) (?v_9 (+ (+ x24 (* x25 x15)) (* x26 x27)))) (let ((?v_10 (and (> ?v_9 x4) (>= ?v_9 x4))) (?v_11 (+ x4 (* x5 x19))) (?v_12 (+ x4 (* x5 x32))) (?v_13 (+ x4 (* x5 x35))) (?v_14 (+ x4 (* x5 x37)))) (let ((?v_35 (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (> ?v_0 x4) (>= ?v_0 x4)) (>= x3 x5)) (and (and (> ?v_1 x4) (>= ?v_1 x4)) (>= x8 x5))) (and (and (> ?v_2 x4) (>= ?v_2 x4)) (>= x9 x5))) (and (and (> ?v_3 x4) (>= ?v_3 x4)) ?v_5)) (and ?v_6 ?v_5)) (and ?v_6 (>= ?v_8 x5))) (and (and (and (> ?v_4 ?v_7) (>= ?v_4 ?v_7)) (>= ?v_8 (* x18 ?v_23))) (>= x14 (* x18 ?v_24)))) (and ?v_10 (>= (* x26 x29) x5))) (and ?v_10 (>= (* x25 x16) x5))) (and ?v_10 (>= (* x26 x28) x5))) (and (and (> x30 x4) (>= x30 x4)) (>= x31 x5))) (and (and (and (> ?v_11 x11) (>= ?v_11 x11)) (>= (* x5 x20) x12)) (>= (* x5 x23) x14))) (and (and (and (> ?v_12 x24) (>= ?v_12 x24)) (>= (* x5 x33) x25)) (>= (* x5 x34) x26))) (and (and (> ?v_13 x30) (>= ?v_13 x30)) (>= (* x5 x36) x31))) (and (and (> ?v_14 x17) (>= ?v_14 x17)) (>= (* x5 x38) x18)))) (?v_15 (+ x39 (* x40 x2))) (?v_16 (+ x39 (* x40 x10))) (?v_17 (+ x42 (* x43 x2))) (?v_18 (+ x42 (* x43 x10))) (?v_19 (+ x46 (* x47 x13))) (?v_22 (+ x15 (* x16 ?v_20))) (?v_21 (+ x46 (* x47 x15))) (?v_25 (+ x49 (* x50 x13))) (?v_28 (+ x27 (* x28 x21)))) (let ((?v_27 (+ ?v_28 (* x29 (+ (+ x32 (* x33 x21)) (* x34 x21))))) (?v_26 (+ (+ x49 (* x50 x15)) (* x51 x27))) (?v_30 (* x28 x22)) (?v_29 (+ ?v_28 (* x29 (+ x35 (* x36 (+ x37 (* x38 x21))))))) (?v_31 (+ x21 (* x22 x19))) (?v_32 (+ x21 (* x22 x32))) (?v_33 (+ x21 (* x22 x35))) (?v_34 (+ x21 (* x22 x37)))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ?v_35 (and (and (> ?v_15 x21) (>= ?v_15 x21)) (>= x41 x22))) (and (> ?v_16 x10) (>= ?v_16 x10))) (and (and (> ?v_17 x21) (>= ?v_17 x21)) (>= x44 x22))) (and (and (> ?v_18 x21) (>= ?v_18 x21)) (>= x45 x22))) (and (and (> ?v_19 x21) (>= ?v_19 x21)) (>= x48 x22))) (and (and (and (> ?v_21 ?v_22) (>= ?v_21 ?v_22)) (>= (* x47 x16) (* x16 ?v_23))) (>= x48 (* x16 ?v_24)))) (and (> ?v_25 x52) (>= ?v_25 x52))) (and (and (and (and (> ?v_26 ?v_27) (>= ?v_26 ?v_27)) (>= (* x50 x16) (* x29 (* x33 x22)))) (>= (* x51 x28) ?v_30)) (>= (* x51 x29) (* x29 (* x34 x22))))) (and (and (> x53 ?v_29) (>= x53 ?v_29)) (>= x54 (+ ?v_30 (* x29 (* x36 (* x38 x22))))))) (and (and (and (> x46 x19) (>= x46 x19)) (>= x47 x20)) (>= x48 x23))) (and (and (and (> x49 x32) (>= x49 x32)) (>= x50 x33)) (>= x51 x34))) (and (and (> x53 x35) (>= x53 x35)) (>= x54 x36))) (and (and (> x15 x37) (>= x15 x37)) (>= x16 x38))) (and (and (and (> ?v_31 x46) (>= ?v_31 x46)) (>= (* x22 x20) x47)) (>= (* x22 x23) x48))) (and (and (and (> ?v_32 x49) (>= ?v_32 x49)) (>= (* x22 x33) x50)) (>= (* x22 x34) x51))) (and (and (> ?v_33 x53) (>= ?v_33 x53)) (>= (* x22 x36) x54))) (and (and (> ?v_34 x15) (>= ?v_34 x15)) (>= (* x22 x38) x16))) (and (and (> x21 0) (>= x21 0)) (>= x22 1))) ?v_35))))))))
(check-sat)
(exit)
