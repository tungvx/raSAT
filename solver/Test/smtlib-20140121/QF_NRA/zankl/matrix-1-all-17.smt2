(set-logic QF_NRA)
(set-info :source |
From termination analysis of term rewriting.

Submitted by Harald Roman Zankl <Harald.Zankl@uibk.ac.at>

|)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun x6 () Real)
(declare-fun x23 () Real)
(declare-fun x13 () Real)
(declare-fun x3 () Real)
(declare-fun x20 () Real)
(declare-fun x10 () Real)
(declare-fun x27 () Real)
(declare-fun x0 () Real)
(declare-fun x17 () Real)
(declare-fun x7 () Real)
(declare-fun x24 () Real)
(declare-fun x14 () Real)
(declare-fun x4 () Real)
(declare-fun x21 () Real)
(declare-fun x11 () Real)
(declare-fun x28 () Real)
(declare-fun x1 () Real)
(declare-fun x18 () Real)
(declare-fun x8 () Real)
(declare-fun x25 () Real)
(declare-fun x15 () Real)
(declare-fun x5 () Real)
(declare-fun x22 () Real)
(declare-fun x12 () Real)
(declare-fun x2 () Real)
(declare-fun x19 () Real)
(declare-fun x9 () Real)
(declare-fun x26 () Real)
(declare-fun x16 () Real)
(assert (>= x6 0))
(assert (>= x23 0))
(assert (>= x13 0))
(assert (>= x3 0))
(assert (>= x20 0))
(assert (>= x10 0))
(assert (>= x27 0))
(assert (>= x0 0))
(assert (>= x17 0))
(assert (>= x7 0))
(assert (>= x24 0))
(assert (>= x14 0))
(assert (>= x4 0))
(assert (>= x21 0))
(assert (>= x11 0))
(assert (>= x28 0))
(assert (>= x1 0))
(assert (>= x18 0))
(assert (>= x8 0))
(assert (>= x25 0))
(assert (>= x15 0))
(assert (>= x5 0))
(assert (>= x22 0))
(assert (>= x12 0))
(assert (>= x2 0))
(assert (>= x19 0))
(assert (>= x9 0))
(assert (>= x26 0))
(assert (>= x16 0))
(assert (let ((?v_0 (+ (+ x0 (* x1 x2)) (* x4 x2))) (?v_1 (+ (+ x5 (* x6 x2)) (* x7 x2))) (?v_2 (+ (+ x8 (* x9 x2)) (* x10 x2))) (?v_20 (+ x11 (* x12 x2))) (?v_8 (* x13 x2))) (let ((?v_3 (+ ?v_20 ?v_8)) (?v_4 (* x12 x3))) (let ((?v_23 (>= ?v_4 x1)) (?v_5 (* x13 x3)) (?v_25 (>= ?v_4 x6)) (?v_6 (+ (+ x8 (* x9 x15)) (* x10 x18))) (?v_11 (+ (* x9 x16) (* x10 x19)))) (let ((?v_27 (>= ?v_4 ?v_11)) (?v_12 (+ (* x9 x17) (* x10 x20))) (?v_13 (+ (+ x21 (* x22 x15)) (* x23 x18)))) (let ((?v_29 (+ x11 (* x12 ?v_13))) (?v_14 (+ x2 (* x3 x18)))) (let ((?v_7 (+ ?v_29 (* x13 ?v_14))) (?v_16 (+ (* x22 x16) (* x23 x19)))) (let ((?v_32 (* x12 ?v_16)) (?v_17 (* x3 x19)) (?v_18 (+ (* x22 x17) (* x23 x20)))) (let ((?v_34 (* x12 ?v_18)) (?v_19 (* x3 x20)) (?v_21 (* x14 x2))) (let ((?v_9 (+ (+ x11 ?v_8) ?v_21)) (?v_10 (* x14 x3))) (let ((?v_24 (>= ?v_10 x4)) (?v_26 (>= ?v_10 x7)) (?v_28 (>= ?v_10 ?v_12)) (?v_30 (* x14 ?v_14))) (let ((?v_15 (+ (+ x11 (* x13 ?v_13)) ?v_30)) (?v_33 (* x14 ?v_17)) (?v_35 (* x14 ?v_19)) (?v_22 (+ ?v_20 ?v_21)) (?v_31 (+ ?v_29 ?v_30))) (let ((?v_69 (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (> ?v_0 x0) (>= ?v_0 x0)) (>= (* x1 x3) x1)) (>= (* x4 x3) x4)) (and (and (and (> ?v_1 x5) (>= ?v_1 x5)) (>= (* x6 x3) x6)) (>= (* x7 x3) x7))) (and (and (and (> ?v_2 x8) (>= ?v_2 x8)) (>= (* x9 x3) x9)) (>= (* x10 x3) x10))) (and (and (and (> ?v_3 x0) (>= ?v_3 x0)) ?v_23) (>= ?v_5 x4))) (and (and (and (> ?v_3 x5) (>= ?v_3 x5)) ?v_25) (>= ?v_5 x7))) (and (and (and (> ?v_3 ?v_6) (>= ?v_3 ?v_6)) ?v_27) (>= ?v_5 ?v_12))) (and (and (and (> ?v_3 ?v_7) (>= ?v_3 ?v_7)) (>= ?v_4 (+ ?v_32 (* x13 ?v_17)))) (>= ?v_5 (+ ?v_34 (* x13 ?v_19))))) (and (and (and (> ?v_9 x0) (>= ?v_9 x0)) (>= ?v_5 x1)) ?v_24)) (and (and (and (> ?v_9 x5) (>= ?v_9 x5)) (>= ?v_5 x6)) ?v_26)) (and (and (and (> ?v_9 ?v_6) (>= ?v_9 ?v_6)) (>= ?v_5 ?v_11)) ?v_28)) (and (and (and (> ?v_9 ?v_15) (>= ?v_9 ?v_15)) (>= ?v_5 (+ (* x13 ?v_16) ?v_33))) (>= ?v_10 (+ (* x13 ?v_18) ?v_35)))) (and (and (and (> ?v_22 x0) (>= ?v_22 x0)) ?v_23) ?v_24)) (and (and (and (> ?v_22 x5) (>= ?v_22 x5)) ?v_25) ?v_26)) (and (and (and (> ?v_22 ?v_6) (>= ?v_22 ?v_6)) ?v_27) ?v_28)) (and (and (and (> ?v_22 ?v_31) (>= ?v_22 ?v_31)) (>= ?v_4 (+ ?v_32 ?v_33))) (>= ?v_10 (+ ?v_34 ?v_35))))) (?v_36 (+ x18 (* x20 x24))) (?v_37 (+ x18 (* x19 x24))) (?v_38 (+ (+ x18 (* x19 x2)) (* x20 x2))) (?v_39 (+ x15 (* x17 x24))) (?v_40 (+ x15 (* x16 x24))) (?v_42 (+ x2 (* x3 x15))) (?v_41 (+ (+ x15 (* x16 x2)) (* x17 x2))) (?v_43 (+ x21 (* x23 x24))) (?v_44 (+ (+ x21 (* x22 x2)) (* x23 x2))) (?v_53 (+ x25 (* x26 ?v_13)))) (let ((?v_46 (+ ?v_53 (* x27 ?v_14))) (?v_51 (+ x25 (* x26 x2))) (?v_47 (* x27 x2))) (let ((?v_45 (+ ?v_51 ?v_47)) (?v_58 (* x26 ?v_16)) (?v_57 (* x26 x3)) (?v_61 (* x26 ?v_18)) (?v_50 (* x27 x3)) (?v_54 (* x28 ?v_14))) (let ((?v_49 (+ (+ x25 (* x27 ?v_13)) ?v_54)) (?v_52 (* x28 x2))) (let ((?v_48 (+ (+ x25 ?v_47) ?v_52)) (?v_59 (* x28 ?v_17)) (?v_62 (* x28 ?v_19)) (?v_60 (* x28 x3)) (?v_56 (+ ?v_53 ?v_54)) (?v_55 (+ ?v_51 ?v_52)) (?v_67 (* x27 x24)) (?v_64 (* x28 x24))) (let ((?v_63 (+ (+ x25 ?v_67) ?v_64)) (?v_66 (+ x25 (* x26 x24)))) (let ((?v_65 (+ ?v_66 ?v_64)) (?v_68 (+ ?v_66 ?v_67))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ?v_69 (and (> ?v_36 x24) (>= ?v_36 x24))) (and (> ?v_37 x24) (>= ?v_37 x24))) (and (and (and (> ?v_38 ?v_14) (>= ?v_38 ?v_14)) (>= (* x19 x3) ?v_17)) (>= (* x20 x3) ?v_19))) (and (and (> ?v_39 0) (>= ?v_39 0)) (>= x16 1))) (and (and (> ?v_40 0) (>= ?v_40 0)) (>= x17 1))) (and (and (and (> ?v_41 ?v_42) (>= ?v_41 ?v_42)) (>= (* x16 x3) (* x3 x16))) (>= (* x17 x3) (* x3 x17)))) (and (and (> ?v_43 0) (>= ?v_43 0)) (>= x22 1))) (and (and (and (> ?v_44 x21) (>= ?v_44 x21)) (>= (* x22 x3) x22)) (>= (* x23 x3) x23))) (and (and (and (> ?v_45 ?v_46) (>= ?v_45 ?v_46)) (>= ?v_57 (+ ?v_58 (* x27 ?v_17)))) (>= ?v_50 (+ ?v_61 (* x27 ?v_19))))) (and (and (and (> ?v_48 ?v_49) (>= ?v_48 ?v_49)) (>= ?v_50 (+ (* x27 ?v_16) ?v_59))) (>= ?v_60 (+ (* x27 ?v_18) ?v_62)))) (and (and (and (> ?v_55 ?v_56) (>= ?v_55 ?v_56)) (>= ?v_57 (+ ?v_58 ?v_59))) (>= ?v_60 (+ ?v_61 ?v_62)))) (and (and (> ?v_63 0) (>= ?v_63 0)) (>= x26 1))) (and (and (> ?v_65 0) (>= ?v_65 0)) (>= x27 1))) (and (and (> ?v_68 0) (>= ?v_68 0)) (>= x28 1))) ?v_69))))))))))))))))))))
(check-sat)
(exit)
