(set-logic QF_NRA)
(set-info :source |
From termination analysis of term rewriting.

Submitted by Harald Roman Zankl <Harald.Zankl@uibk.ac.at>

|)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x6 () Real)
(declare-fun x13 () Real)
(declare-fun x3 () Real)
(declare-fun x10 () Real)
(declare-fun x0 () Real)
(declare-fun x17 () Real)
(declare-fun x7 () Real)
(declare-fun x14 () Real)
(declare-fun x4 () Real)
(declare-fun x11 () Real)
(declare-fun x1 () Real)
(declare-fun x18 () Real)
(declare-fun x8 () Real)
(declare-fun x15 () Real)
(declare-fun x5 () Real)
(declare-fun x12 () Real)
(declare-fun x2 () Real)
(declare-fun x19 () Real)
(declare-fun x9 () Real)
(declare-fun x16 () Real)
(assert (>= x6 0))
(assert (>= x13 0))
(assert (>= x3 0))
(assert (>= x10 0))
(assert (>= x0 0))
(assert (>= x17 0))
(assert (>= x7 0))
(assert (>= x14 0))
(assert (>= x4 0))
(assert (>= x11 0))
(assert (>= x1 0))
(assert (>= x18 0))
(assert (>= x8 0))
(assert (>= x15 0))
(assert (>= x5 0))
(assert (>= x12 0))
(assert (>= x2 0))
(assert (>= x19 0))
(assert (>= x9 0))
(assert (>= x16 0))
(assert (let ((?v_1 (+ x4 (* x5 x2))) (?v_0 (+ x0 (* x1 x2))) (?v_3 (* x1 x3)) (?v_4 (+ x8 (* x9 x2)))) (let ((?v_2 (+ x6 (* x7 ?v_4))) (?v_6 (* x9 x3)) (?v_23 (+ x12 (* x13 ?v_4)))) (let ((?v_5 (+ x10 (* x11 ?v_23))) (?v_26 (* x13 ?v_6)) (?v_7 (+ x10 (* x11 x2))) (?v_9 (* x11 x3)) (?v_8 (+ x14 (* x15 x16))) (?v_17 (* x15 x17)) (?v_27 (+ x2 (* x3 x16)))) (let ((?v_10 (+ x0 (* x1 ?v_27))) (?v_30 (* x3 x17)) (?v_12 (+ x0 (* x1 x12))) (?v_11 (+ x10 (* x11 x12))) (?v_13 (+ x10 (* x11 x8))) (?v_15 (* x11 x9)) (?v_14 (+ x4 (* x5 x16))) (?v_21 (* x5 x17)) (?v_33 (+ x8 (* x9 x16)))) (let ((?v_16 (+ x0 (* x1 ?v_33))) (?v_36 (* x9 x17)) (?v_18 (+ x14 (* x15 x18))) (?v_19 (+ x6 (* x7 x16))) (?v_20 (+ x6 (* x7 x18))) (?v_22 (+ x4 (* x5 x18)))) (let ((?v_41 (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (> ?v_0 ?v_1) (>= ?v_0 ?v_1)) (>= ?v_3 (* x5 x3))) (and (and (> ?v_0 ?v_2) (>= ?v_0 ?v_2)) (>= ?v_3 (* x7 ?v_6)))) (and (and (> ?v_0 ?v_5) (>= ?v_0 ?v_5)) (>= ?v_3 (* x11 ?v_26)))) (and (and (> ?v_7 x10) (>= ?v_7 x10)) (>= ?v_9 x11))) (and (and (> ?v_7 ?v_8) (>= ?v_7 ?v_8)) (>= ?v_9 ?v_17))) (and (and (> ?v_7 ?v_10) (>= ?v_7 ?v_10)) (>= ?v_9 (* x1 ?v_30)))) (and (and (> ?v_11 ?v_12) (>= ?v_11 ?v_12)) (>= (* x11 x13) (* x1 x13)))) (and (and (> ?v_13 x10) (>= ?v_13 x10)) (>= ?v_15 x11))) (and (and (> ?v_13 ?v_14) (>= ?v_13 ?v_14)) (>= ?v_15 ?v_21))) (and (and (> ?v_13 ?v_16) (>= ?v_13 ?v_16)) (>= ?v_15 (* x1 ?v_36)))) (and (and (> ?v_8 x14) (>= ?v_8 x14)) (>= ?v_17 x15))) (and (and (> ?v_18 x14) (>= ?v_18 x14)) (>= (* x15 x19) x15))) (and (and (> ?v_19 x6) (>= ?v_19 x6)) (>= (* x7 x17) x7))) (and (and (> ?v_20 x6) (>= ?v_20 x6)) (>= (* x7 x19) x7))) (and (and (> ?v_14 x4) (>= ?v_14 x4)) (>= ?v_21 x5))) (and (and (> ?v_22 x4) (>= ?v_22 x4)) (>= (* x5 x19) x5)))) (?v_25 (+ x16 (* x17 ?v_23))) (?v_24 (+ x18 (* x19 x2))) (?v_29 (+ x18 (* x19 ?v_27))) (?v_28 (+ x16 (* x17 x2))) (?v_32 (+ x18 (* x19 x12))) (?v_31 (+ x16 (* x17 x12))) (?v_35 (+ x18 (* x19 ?v_33))) (?v_34 (+ x16 (* x17 x8))) (?v_37 (+ x2 (* x3 x18))) (?v_38 (+ x12 (* x13 x16))) (?v_39 (+ x12 (* x13 x18))) (?v_40 (+ x8 (* x9 x18)))) (and (and (and (and (and (and (and (and (and (and (and ?v_41 (and (and (> ?v_24 ?v_25) (>= ?v_24 ?v_25)) (>= (* x19 x3) (* x17 ?v_26)))) (and (and (> ?v_28 ?v_29) (>= ?v_28 ?v_29)) (>= (* x17 x3) (* x19 ?v_30)))) (and (and (> ?v_31 ?v_32) (>= ?v_31 ?v_32)) (>= (* x17 x13) (* x19 x13)))) (and (and (> ?v_34 ?v_35) (>= ?v_34 ?v_35)) (>= (* x17 x9) (* x19 ?v_36)))) (and (and (> ?v_27 x2) (>= ?v_27 x2)) (>= ?v_30 x3))) (and (and (> ?v_37 x2) (>= ?v_37 x2)) (>= (* x3 x19) x3))) (and (and (> ?v_38 x12) (>= ?v_38 x12)) (>= (* x13 x17) x13))) (and (and (> ?v_39 x12) (>= ?v_39 x12)) (>= (* x13 x19) x13))) (and (and (> ?v_33 x8) (>= ?v_33 x8)) (>= ?v_36 x9))) (and (and (> ?v_40 x8) (>= ?v_40 x8)) (>= (* x9 x19) x9))) ?v_41))))))))
(check-sat)
(exit)
