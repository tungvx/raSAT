(set-logic QF_NRA)
(set-info :source |
From termination analysis of term rewriting.

Submitted by Harald Roman Zankl <Harald.Zankl@uibk.ac.at>

|)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun x6 () Real)
(declare-fun x23 () Real)
(declare-fun x13 () Real)
(declare-fun x30 () Real)
(declare-fun x3 () Real)
(declare-fun x20 () Real)
(declare-fun x37 () Real)
(declare-fun x10 () Real)
(declare-fun x27 () Real)
(declare-fun x0 () Real)
(declare-fun x17 () Real)
(declare-fun x34 () Real)
(declare-fun x7 () Real)
(declare-fun x24 () Real)
(declare-fun x14 () Real)
(declare-fun x31 () Real)
(declare-fun x4 () Real)
(declare-fun x21 () Real)
(declare-fun x38 () Real)
(declare-fun x11 () Real)
(declare-fun x28 () Real)
(declare-fun x1 () Real)
(declare-fun x18 () Real)
(declare-fun x35 () Real)
(declare-fun x8 () Real)
(declare-fun x25 () Real)
(declare-fun x15 () Real)
(declare-fun x32 () Real)
(declare-fun x5 () Real)
(declare-fun x22 () Real)
(declare-fun x12 () Real)
(declare-fun x29 () Real)
(declare-fun x2 () Real)
(declare-fun x19 () Real)
(declare-fun x36 () Real)
(declare-fun x9 () Real)
(declare-fun x26 () Real)
(declare-fun x16 () Real)
(declare-fun x33 () Real)
(assert (>= x6 0))
(assert (>= x23 0))
(assert (>= x13 0))
(assert (>= x30 0))
(assert (>= x3 0))
(assert (>= x20 0))
(assert (>= x37 0))
(assert (>= x10 0))
(assert (>= x27 0))
(assert (>= x0 0))
(assert (>= x17 0))
(assert (>= x34 0))
(assert (>= x7 0))
(assert (>= x24 0))
(assert (>= x14 0))
(assert (>= x31 0))
(assert (>= x4 0))
(assert (>= x21 0))
(assert (>= x38 0))
(assert (>= x11 0))
(assert (>= x28 0))
(assert (>= x1 0))
(assert (>= x18 0))
(assert (>= x35 0))
(assert (>= x8 0))
(assert (>= x25 0))
(assert (>= x15 0))
(assert (>= x32 0))
(assert (>= x5 0))
(assert (>= x22 0))
(assert (>= x12 0))
(assert (>= x29 0))
(assert (>= x2 0))
(assert (>= x19 0))
(assert (>= x36 0))
(assert (>= x9 0))
(assert (>= x26 0))
(assert (>= x16 0))
(assert (>= x33 0))
(assert (let ((?v_1 (+ x2 (* x3 x2)))) (let ((?v_0 (+ x0 (* x1 ?v_1))) (?v_3 (* x3 x3)) (?v_2 (+ x4 (* x5 ?v_1))) (?v_18 (+ (+ x11 (* x12 x13)) (* x14 x15)))) (let ((?v_4 (+ x8 (* x10 ?v_18))) (?v_5 (+ x18 (* x19 x20))) (?v_6 (+ x18 (* x19 x24))) (?v_22 (+ x11 (* x12 x27)))) (let ((?v_7 (+ (+ x8 (* x9 x25)) (* x10 ?v_22))) (?v_25 (* x12 x28))) (let ((?v_26 (and (and (and (and (and (and (and (and (and (> ?v_0 x0) (>= ?v_0 x0)) (>= (* x1 ?v_3) x1)) (and (and (> ?v_2 x4) (>= ?v_2 x4)) (>= (* x5 ?v_3) x5))) (and (and (> x6 ?v_4) (>= x6 ?v_4)) (>= x7 x9))) (and (and (> x8 x16) (>= x8 x16)) (>= x9 x17))) (and (and (and (> x8 ?v_5) (>= x8 ?v_5)) (>= x9 (+ (* x19 x21) x22))) (>= x10 x23))) (and (and (> ?v_6 x4) (>= ?v_6 x4)) (>= x22 x5))) (and (and (> ?v_6 x0) (>= ?v_6 x0)) (>= x22 x1))) (and (and (and (> ?v_6 ?v_7) (>= ?v_6 ?v_7)) (>= x22 (+ (* x9 x26) (* x10 ?v_25)))) (>= x23 (* x10 x14))))) (?v_8 (+ x25 (* x26 x13))) (?v_13 (+ x2 (* x3 x13)))) (let ((?v_9 (+ x25 (* x26 ?v_13))) (?v_11 (+ x2 (* x3 x25))) (?v_10 (+ x25 (* x26 ?v_1))) (?v_12 (+ x27 (* x28 x13))) (?v_14 (+ x27 (* x28 ?v_13))) (?v_15 (+ x27 (* x28 ?v_1))) (?v_16 (+ x20 (* x21 x13))) (?v_17 (+ x20 (* x21 x2))) (?v_19 (+ x32 (* x34 ?v_18))) (?v_20 (+ x35 (* x36 x20))) (?v_21 (+ x35 (* x36 x29))) (?v_24 (+ (+ x32 (* x33 x25)) (* x34 ?v_22))) (?v_23 (+ x35 (* x36 x24)))) (and (and (and (and (and (and (and (and (and (and (and (and (and ?v_26 (and (> ?v_8 x13) (>= ?v_8 x13))) (and (> ?v_9 x13) (>= ?v_9 x13))) (and (and (> ?v_10 ?v_11) (>= ?v_10 ?v_11)) (>= (* x26 ?v_3) (* x3 x26)))) (and (> ?v_12 x13) (>= ?v_12 x13))) (and (> ?v_14 ?v_13) (>= ?v_14 ?v_13))) (and (and (> ?v_15 x27) (>= ?v_15 x27)) (>= (* x28 ?v_3) x28))) (and (> ?v_16 x29) (>= ?v_16 x29))) (and (> ?v_17 x24) (>= ?v_17 x24))) (and (and (> x30 ?v_19) (>= x30 ?v_19)) (>= x31 x33))) (and (and (and (> x32 ?v_20) (>= x32 ?v_20)) (>= x33 (+ (* x36 x21) x37))) (>= x34 x38))) (and (and (> ?v_21 0) (>= ?v_21 0)) (>= x38 1))) (and (and (and (> ?v_23 ?v_24) (>= ?v_23 ?v_24)) (>= x37 (+ (* x33 x26) (* x34 ?v_25)))) (>= x38 (* x34 x14)))) ?v_26))))))))
(check-sat)
(exit)
